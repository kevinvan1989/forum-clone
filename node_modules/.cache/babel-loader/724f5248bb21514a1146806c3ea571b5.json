{"ast":null,"code":"var _jsxFileName = \"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/Postdetail.js\";\nimport React, { Component } from \"react\";\nimport { API } from \"../libs/API\";\nimport Time from \"../components/Time\";\nimport Comment from \"../components/Comment\";\nimport commentIconDark from \"../assets/icons/comment-icon-dark.png\";\nimport CreateComment from \"../components/CreateComment\";\nimport { connect } from \"react-redux\";\nimport { getUser } from \"../redux/actions/authActions\";\nimport Userinfo from \"../components/Userinfo\"; // TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\n\nclass Postdetail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      post: {\n        // user is defined for destructuring\n        user: \"\"\n      },\n      comments: {}\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUser();\n    console.log(this.props.match.params.id);\n    const {\n      id\n    } = this.props.match.params;\n    API.get(`/api/posts/${id}`).then(res => {\n      console.log(\"detail\", res.data);\n      this.setState({\n        post: res.data,\n        comments: res.data.comments\n      });\n    });\n  }\n\n  componentDidUpdate(prevState) {\n    console.log(\"updated!!!\");\n    console.log(prevState);\n  }\n\n  render() {\n    console.log(\"state\", this.state);\n    const {\n      id: postId,\n      title,\n      body,\n      created_at,\n      updated_at,\n      comments\n    } = this.state.post;\n    const {\n      id: userId,\n      first_name,\n      last_name,\n      favorite_color,\n      avatar,\n      last_login_at\n    } = this.state.post.user;\n    console.log(comments);\n    const {\n      isLoggedIn\n    } = this.props;\n    console.log(\"post detail props\", \"postID\", postId, \"userID\", userId);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container grid-container--2-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"grid__col grid__col--1 flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"article\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: commentIconDark,\n      alt: \"\",\n      className: \"comment-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }), comments ? comments.length : \"\", \" comments\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, title), /*#__PURE__*/React.createElement(Time, {\n      created_at: created_at,\n      exactTime: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"body-txt\",\n      dangerouslySetInnerHTML: {\n        __html: body\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    })), isLoggedIn.user !== \"not set\" && /*#__PURE__*/React.createElement(CreateComment, {\n      postId: postId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(\"aside\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Userinfo, {\n      userId: userId,\n      imgUrl: {\n        avatar: avatar,\n        avatar_class: \"\"\n      },\n      firstName: first_name,\n      lastName: last_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"grid__col grid__col--2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, console.log(comments), comments && comments.length !== 0 ? comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n      commentData: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 41\n      }\n    })) : \"no comments\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  isLoggedIn: state.auth\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getUser: () => dispatch(getUser)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Postdetail);","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/Postdetail.js"],"names":["React","Component","API","Time","Comment","commentIconDark","CreateComment","connect","getUser","Userinfo","Postdetail","state","post","user","comments","componentDidMount","props","console","log","match","params","id","get","then","res","data","setState","componentDidUpdate","prevState","render","postId","title","body","created_at","updated_at","userId","first_name","last_name","favorite_color","avatar","last_login_at","isLoggedIn","length","__html","avatar_class","map","comment","mapStateToProps","auth","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { API } from \"../libs/API\";\nimport Time from \"../components/Time\";\nimport Comment from \"../components/Comment\";\nimport commentIconDark from \"../assets/icons/comment-icon-dark.png\";\nimport CreateComment from \"../components/CreateComment\";\nimport { connect } from \"react-redux\";\nimport { getUser } from \"../redux/actions/authActions\";\nimport Userinfo from \"../components/Userinfo\";\n\n// TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\n\nclass Postdetail extends Component {\n  state = {\n    post: {\n      // user is defined for destructuring\n      user: \"\",\n    },\n    comments: {}\n  };\n\n  componentDidMount() {\n    this.props.getUser();\n    console.log(this.props.match.params.id);\n    const { id } = this.props.match.params;\n\n    API.get(`/api/posts/${id}`).then((res) => {\n      console.log(\"detail\", res.data);\n      this.setState({ post: res.data, comments: res.data.comments });\n    });\n  }\n\n  componentDidUpdate(prevState) {\n    console.log(\"updated!!!\");\n    console.log(prevState);\n  }\n\n  render() {\n    console.log(\"state\", this.state);\n    const {\n      id: postId,\n      title,\n      body,\n      created_at,\n      updated_at,\n      comments,\n    } = this.state.post;\n    const {\n      id: userId,\n      first_name,\n      last_name,\n      favorite_color,\n      avatar,\n      last_login_at,\n    } = this.state.post.user;\n    console.log(comments);\n\n    const { isLoggedIn } = this.props;\n\n    console.log(\"post detail props\", \"postID\", postId, \"userID\", userId);\n\n    return (\n      <div className=\"grid-container grid-container--2-col\">\n        {/* Column with orignal post and text editor */}\n        <section className=\"grid__col grid__col--1 flex\">\n          {/* Display blogpost(text content) & avatar as flex */}\n          <article>\n            {/* Comment count total */}\n            <div>\n              <img src={commentIconDark} alt=\"\" className=\"comment-icon\" />\n              {comments ? comments.length : \"\"} comments\n            </div>\n            <h1>{title}</h1>\n            <Time created_at={created_at} exactTime={true} />\n            <div\n              className=\"body-txt\"\n              dangerouslySetInnerHTML={{ __html: body }}\n            ></div>\n          </article>\n\n          {/* Check if user is logged in:\n                if so: show text area for comment\n                if not: hide text area for comment */}\n          {isLoggedIn.user !== \"not set\" && <CreateComment postId={postId} />}\n\n          {/* Flex item right with image and name ;*/}\n          <aside>\n            <Userinfo\n              userId={userId}\n              imgUrl={{avatar: avatar, avatar_class: \"\"}}\n              firstName={first_name}\n              lastName={last_name}\n            />\n          </aside>\n        </section>\n\n        {/* Colulmn with all comments */}\n        <section className=\"grid__col grid__col--2\">\n          {console.log(comments)}\n          {comments && comments.length !== 0\n            ? comments.map((comment) => <Comment commentData={comment} />)\n            : \"no comments\"}\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoggedIn: state.auth,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUser: () => dispatch(getUser),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Postdetail);\n"]},"metadata":{},"sourceType":"module"}