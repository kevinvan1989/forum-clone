{"ast":null,"code":"var _jsxFileName = \"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/components/CreateComment.js\";\nimport React, { Component } from 'react';\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { addComment } from \"../redux/actions/postsActions\";\nimport CreateCommentForm from './CreateCommentForm';\nimport { getUser } from \"../redux/actions/authActions\";\n\nclass CreateComment extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handlePostComment = values => {\n      const {\n        postId\n      } = this.props;\n      this.props.postComment(values, postId);\n      this.props.getUser();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"comment-editor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      onSubmit: this.handlePostComment,\n      initialValues: {\n        // D.m.v. deze keys worden values opgehaald in <Field>\n        ADD_COMMENT_editor: 'init value Formik'\n      } // Input and give feedback / errors\n      ,\n      validationSchema: Yup.object({}),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, props => /*#__PURE__*/React.createElement(CreateCommentForm, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: (values, postID) => dispatch(addComment(values, postID)),\n  getUser: () => dispatch(getUser)\n});\n\nexport default connect(undefined, mapDispatchToProps)(CreateComment);","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/components/CreateComment.js"],"names":["React","Component","Formik","Yup","connect","addComment","CreateCommentForm","getUser","CreateComment","handlePostComment","values","postId","props","postComment","render","ADD_COMMENT_editor","object","mapDispatchToProps","dispatch","postID","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,OAAT,QAAwB,8BAAxB;;AAEA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SACpCQ,iBADoC,GAChBC,MAAM,IAAI;AAC5B,YAAM;AAACC,QAAAA;AAAD,UAAW,KAAKC,KAAtB;AAGA,WAAKA,KAAL,CAAWC,WAAX,CAAuBH,MAAvB,EAA+BC,MAA/B;AACA,WAAKC,KAAL,CAAWL,OAAX;AAED,KARmC;AAAA;;AAUpCO,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAE,KAAKL,iBADjB;AAEE,MAAA,aAAa,EAAE;AACb;AACAM,QAAAA,kBAAkB,EAAE;AAFP,OAFjB,CAME;AANF;AAOE,MAAA,gBAAgB,EAAEZ,GAAG,CAACa,MAAJ,CAAW,EAAX,CAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASGJ,KAAK,iBAAI,oBAAC,iBAAD,oBAAuBA,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATZ,CADF,CADF;AAeD;;AA1BmC;;AA6BtC,MAAMK,kBAAkB,GAAGC,QAAQ,KAAK;AACtCL,EAAAA,WAAW,EAAE,CAACH,MAAD,EAASS,MAAT,KAAoBD,QAAQ,CAACb,UAAU,CAACK,MAAD,EAASS,MAAT,CAAX,CADH;AAEtCZ,EAAAA,OAAO,EAAE,MAAMW,QAAQ,CAACX,OAAD;AAFe,CAAL,CAAnC;;AAKA,eAAeH,OAAO,CAACgB,SAAD,EAAYH,kBAAZ,CAAP,CAAuCT,aAAvC,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { Formik } from \"formik\"\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { addComment } from \"../redux/actions/postsActions\";\nimport CreateCommentForm from './CreateCommentForm';\nimport { getUser } from \"../redux/actions/authActions\";\n\nclass CreateComment extends Component {\n  handlePostComment = values => {\n    const {postId} = this.props\n\n\n    this.props.postComment(values, postId)\n    this.props.getUser()\n\n  } \n\n  render() {\n    return (\n      <div id='comment-editor'>\n        <Formik\n          onSubmit={this.handlePostComment}\n          initialValues={{\n            // D.m.v. deze keys worden values opgehaald in <Field>\n            ADD_COMMENT_editor: 'init value Formik'\n          }}\n          // Input and give feedback / errors\n          validationSchema={Yup.object({})}\n        >\n          {props => <CreateCommentForm {...props} />}\n        </Formik>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: (values, postID) => dispatch(addComment(values, postID)),\n  getUser: () => dispatch(getUser)\n})\n\nexport default connect(undefined, mapDispatchToProps)(CreateComment)"]},"metadata":{},"sourceType":"module"}