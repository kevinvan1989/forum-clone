{"ast":null,"code":"import { API } from \"../../libs/API\";\nexport const fetchPost = page => dispatch => {\n  API.get(\"/api/posts?page=\" + page).then(response => {\n    console.log('action', response.data.data);\n    return dispatch({\n      type: \"FETCH_DATA\",\n      payload: response.data\n    });\n  });\n};\nexport const addNewPost = values => dispatch => {\n  //console.log('user in create post', user)\n  console.log('values in create post', values); // Values are holding Formik values, based on key-value of initialValues\n\n  API.post(\"/api/posts\", {\n    \"title\": values.CREATE_POST_title,\n    'body': values.CREATE_POST_editor\n  }).then(response => {\n    console.log('addnewpost', response);\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    });\n  });\n};\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {\n    'blog_post_id': postID,\n    'body': values.ADD_COMMENT_editor\n  }).then(response => {\n    console.log(response);\n    return dispatch({\n      type: \"ADD_COMMENT\",\n      payload: response.data\n    });\n  });\n}; // Is in actions because of reuse in postdetail\n// export const deletePost = postID => dispatch => {\n//   API.delete(`/api/posts/${postID}`).then(\n//     response => {\n//       console.log(response)\n//       return dispatch(\n//         {\n//           type: \"DELETE_POST\",\n//           payload: response\n//         }\n//       )\n//     }\n//   )\n// }\n// export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/redux/actions/postsActions.js"],"names":["API","fetchPost","page","dispatch","get","then","response","console","log","data","type","payload","addNewPost","values","post","CREATE_POST_title","CREATE_POST_editor","addComment","postID","ADD_COMMENT_editor"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAIA,OAAO,MAAMC,SAAS,GAAIC,IAAI,IAAKC,QAAD,IAAc;AAC3CH,EAAAA,GAAG,CAACI,GAAJ,CAAQ,qBAAmBF,IAA3B,EAAiCG,IAAjC,CAAsCC,QAAQ,IAAI;AACjDC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,QAAQ,CAACG,IAAT,CAAcA,IAApC;AACA,WAAON,QAAQ,CAAC;AACdO,MAAAA,IAAI,EAAE,YADQ;AAEdC,MAAAA,OAAO,EAAEL,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GANA;AAOJ,CARM;AAUP,OAAO,MAAMG,UAAU,GAAIC,MAAD,IAAYV,QAAQ,IAAG;AAC/C;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCK,MAArC,EAF+C,CAI/C;;AACAb,EAAAA,GAAG,CAACc,IAAJ,CAAS,YAAT,EAAuB;AAAC,aAASD,MAAM,CAACE,iBAAjB;AAAoC,YAAQF,MAAM,CAACG;AAAnD,GAAvB,EAA+FX,IAA/F,CAAoGC,QAAQ,IAAI;AAC9GC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,QAA1B;AACA,WAAOH,QAAQ,CAAC;AACdO,MAAAA,IAAI,EAAE,cADQ;AAEdC,MAAAA,OAAO,EAAEL,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GAND;AAOD,CAZM;AAcP,OAAO,MAAMQ,UAAU,GAAG,CAACJ,MAAD,EAASK,MAAT,KAAoBf,QAAQ,IAAI;AACxD;AACA;AACAH,EAAAA,GAAG,CAACc,IAAJ,CAAS,eAAT,EAA0B;AAAC,oBAAgBI,MAAjB;AAAyB,YAAQL,MAAM,CAACM;AAAxC,GAA1B,EAAuFd,IAAvF,CACEC,QAAQ,IAAI;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOH,QAAQ,CAAC;AACdO,MAAAA,IAAI,EAAE,aADQ;AAEdC,MAAAA,OAAO,EAAEL,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GAPH;AASD,CAZM,C,CAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { API } from \"../../libs/API\";\n\n\n\nexport const fetchPost  = page => (dispatch) => {\n     API.get(\"/api/posts?page=\"+page).then(response => {\n      console.log('action', response.data.data);\n      return dispatch({\n        type: \"FETCH_DATA\",\n        payload: response.data\n      });\n    })\n}\n\nexport const addNewPost = (values) => dispatch =>{\n  //console.log('user in create post', user)\n  console.log('values in create post', values)\n\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\"title\": values.CREATE_POST_title, 'body': values.CREATE_POST_editor}).then(response => {\n    console.log('addnewpost', response)\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    })\n  })\n}\n\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {'blog_post_id': postID, 'body': values.ADD_COMMENT_editor}).then(\n    response => {\n      console.log(response)\n      return dispatch({\n        type: \"ADD_COMMENT\",\n        payload: response.data\n      })\n    }\n  )\n}\n\n// Is in actions because of reuse in postdetail\n// export const deletePost = postID => dispatch => {\n//   API.delete(`/api/posts/${postID}`).then(\n//     response => {\n//       console.log(response)\n//       return dispatch(\n//         {\n//           type: \"DELETE_POST\",\n//           payload: response\n//         }\n//       )\n//     }\n//   )\n// }\n\n// export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };"]},"metadata":{},"sourceType":"module"}