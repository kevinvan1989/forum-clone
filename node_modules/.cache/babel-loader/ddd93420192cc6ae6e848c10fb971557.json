{"ast":null,"code":"var _jsxFileName = \"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/Postdetail.js\";\nimport React, { Component } from \"react\";\nimport { API } from \"../libs/API\";\nimport Time from \"../components/Time\";\nimport Comment from \"../components/Comment\";\nimport commentIconDark from \"../assets/icons/comment-icon-dark.png\";\nimport CreateComment from \"../components/CreateComment\";\nimport { connect } from \"react-redux\";\nimport { getUser } from \"../redux/actions/authActions\";\nimport Userinfo from \"../components/Userinfo\";\nimport { Redirect } from \"react-router-dom\"; // TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\n\nclass Postdetail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      post: {\n        // user is defined for destructuring\n        user: \"\"\n      },\n      comments: []\n    };\n\n    this.addCommentToState = comment => {\n      console.log(this.props);\n      console.log(this.state);\n      const commentList = this.state.comments;\n      this.setState({ ...this.state,\n        comments: commentList.push(comment)\n      });\n      const {\n        id\n      } = this.props.match.params;\n      this.props.history.push('/postdetail/' + id);\n    };\n  }\n\n  componentDidMount() {\n    this.props.getUser();\n    const {\n      id\n    } = this.props.match.params;\n    API.get(`/api/posts/${id}`).then(res => {\n      this.setState({\n        post: res.data,\n        comments: res.data.comments,\n        commentsLength: res.data.comments.length\n      });\n    });\n    console.log('history', this.props.history);\n  }\n\n  componentDidUpdate() {\n    window.location.reload();\n  }\n\n  render() {\n    console.log();\n    const {\n      id: postId,\n      title,\n      body,\n      created_at,\n      updated_at,\n      comments\n    } = this.state.post;\n    const {\n      id: userId,\n      first_name,\n      last_name,\n      favorite_color,\n      avatar,\n      last_login_at\n    } = this.state.post.user;\n    const {\n      isLoggedIn\n    } = this.props;\n    console.log(isLoggedIn);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid-container grid-container--2-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"grid__col grid__col--1 flex p-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"article\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: commentIconDark,\n      alt: \"\",\n      className: \"comment-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 15\n      }\n    }), this.state.comments.length, \" comments\"), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, title), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"body-txt\",\n      dangerouslySetInnerHTML: {\n        __html: body\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    })), isLoggedIn.user !== \"not set\" && /*#__PURE__*/React.createElement(CreateComment, {\n      postId: postId,\n      addComment: this.addCommentToState,\n      stated: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"aside\", {\n      className: \"m-auto text-center detail--aside\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Userinfo, {\n      userId: userId,\n      imgUrl: {\n        avatar: avatar,\n        avatar_class: \"\"\n      },\n      firstName: first_name,\n      lastName: last_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"grid__col grid__col--2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, this.state.comments.map(comment => /*#__PURE__*/React.createElement(Comment, {\n      commentData: comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  stated: state,\n  isLoggedIn: state.auth,\n  posts: state.posts\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getUser: () => dispatch(getUser)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Postdetail);","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/Postdetail.js"],"names":["React","Component","API","Time","Comment","commentIconDark","CreateComment","connect","getUser","Userinfo","Redirect","Postdetail","state","post","user","comments","addCommentToState","comment","console","log","props","commentList","setState","push","id","match","params","history","componentDidMount","get","then","res","data","commentsLength","length","componentDidUpdate","window","location","reload","render","postId","title","body","created_at","updated_at","userId","first_name","last_name","favorite_color","avatar","last_login_at","isLoggedIn","__html","avatar_class","map","mapStateToProps","stated","auth","posts","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,QAAT,QAAyB,kBAAzB,C,CAEA;AACA;;AAEA,MAAMC,UAAN,SAAyBV,SAAzB,CAAmC;AAAA;AAAA;AAAA,SACjCW,KADiC,GACzB;AACNC,MAAAA,IAAI,EAAE;AACJ;AACAC,QAAAA,IAAI,EAAE;AAFF,OADA;AAKNC,MAAAA,QAAQ,EAAE;AALJ,KADyB;;AAAA,SA0BjCC,iBA1BiC,GA0BZC,OAAD,IAAa;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKP,KAAjB;AACA,YAAMS,WAAW,GAAG,KAAKT,KAAL,CAAWG,QAA/B;AACA,WAAKO,QAAL,CAAc,EACZ,GAAG,KAAKV,KADI;AAEZG,QAAAA,QAAQ,EAAEM,WAAW,CAACE,IAAZ,CAAiBN,OAAjB;AAFE,OAAd;AAKA,YAAM;AAAEO,QAAAA;AAAF,UAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AACA,WAAKN,KAAL,CAAWO,OAAX,CAAmBJ,IAAnB,CAAwB,iBAAeC,EAAvC;AAED,KAtCgC;AAAA;;AASjCI,EAAAA,iBAAiB,GAAG;AAClB,SAAKR,KAAL,CAAWZ,OAAX;AACA,UAAM;AAAEgB,MAAAA;AAAF,QAAS,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAAhC;AAEAxB,IAAAA,GAAG,CAAC2B,GAAJ,CAAS,cAAaL,EAAG,EAAzB,EAA4BM,IAA5B,CAAkCC,GAAD,IAAS;AACxC,WAAKT,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAEkB,GAAG,CAACC,IAAZ;AAAkBjB,QAAAA,QAAQ,EAAEgB,GAAG,CAACC,IAAJ,CAASjB,QAArC;AAA+CkB,QAAAA,cAAc,EAAEF,GAAG,CAACC,IAAJ,CAASjB,QAAT,CAAkBmB;AAAjF,OAAd;AACD,KAFD;AAKChB,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB,KAAKC,KAAL,CAAWO,OAAlC;AACF;;AAEDQ,EAAAA,kBAAkB,GAAE;AAClBC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AAiBDC,EAAAA,MAAM,GAAG;AACPrB,IAAAA,OAAO,CAACC,GAAR;AACA,UAAM;AACJK,MAAAA,EAAE,EAAEgB,MADA;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,IAHI;AAIJC,MAAAA,UAJI;AAKJC,MAAAA,UALI;AAMJ7B,MAAAA;AANI,QAOF,KAAKH,KAAL,CAAWC,IAPf;AASA,UAAM;AACJW,MAAAA,EAAE,EAAEqB,MADA;AAEJC,MAAAA,UAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,cAJI;AAKJC,MAAAA,MALI;AAMJC,MAAAA;AANI,QAOF,KAAKtC,KAAL,CAAWC,IAAX,CAAgBC,IAPpB;AASA,UAAM;AAAEqC,MAAAA;AAAF,QAAiB,KAAK/B,KAA5B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYgC,UAAZ;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAS,MAAA,SAAS,EAAC,iCAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAE9C,eAAV;AAA2B,MAAA,GAAG,EAAC,EAA/B;AAAkC,MAAA,SAAS,EAAC,cAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEG,KAAKO,KAAL,CAAWG,QAAX,CAAoBmB,MAFvB,cAFF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKO,KAAL,CANF,eAQE;AACE,MAAA,SAAS,EAAC,UADZ;AAEE,MAAA,uBAAuB,EAAE;AAAEW,QAAAA,MAAM,EAAEV;AAAV,OAF3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CAFF,EAmBGS,UAAU,CAACrC,IAAX,KAAoB,SAApB,iBACC,oBAAC,aAAD;AACE,MAAA,MAAM,EAAE0B,MADV;AAEE,MAAA,UAAU,EAAE,KAAKxB,iBAFnB;AAGE,MAAA,MAAM,EAAE,KAAKJ,KAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBJ,eA4BE;AAAO,MAAA,SAAS,EAAC,kCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AACE,MAAA,MAAM,EAAEiC,MADV;AAEE,MAAA,MAAM,EAAE;AAAEI,QAAAA,MAAM,EAAEA,MAAV;AAAkBI,QAAAA,YAAY,EAAE;AAAhC,OAFV;AAGE,MAAA,SAAS,EAAEP,UAHb;AAIE,MAAA,QAAQ,EAAEC,SAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA5BF,CAFF,eAyCE;AAAS,MAAA,SAAS,EAAC,wBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnC,KAAL,CAAWG,QAAX,CAAoBuC,GAApB,CAAyBrC,OAAD,iBAEvB,oBAAC,OAAD;AAAS,MAAA,WAAW,EAAEA,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFD,CADH,CAzCF,CADF;AAkDD;;AAlHgC;;AAqHnC,MAAMsC,eAAe,GAAI3C,KAAD,KAAY;AAClC4C,EAAAA,MAAM,EAAE5C,KAD0B;AAElCuC,EAAAA,UAAU,EAAEvC,KAAK,CAAC6C,IAFgB;AAGlCC,EAAAA,KAAK,EAAE9C,KAAK,CAAC8C;AAHqB,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxCpD,EAAAA,OAAO,EAAE,MAAMoD,QAAQ,CAACpD,OAAD;AADiB,CAAf,CAA3B;;AAIA,eAAeD,OAAO,CAACgD,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ChD,UAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { API } from \"../libs/API\";\nimport Time from \"../components/Time\";\nimport Comment from \"../components/Comment\";\nimport commentIconDark from \"../assets/icons/comment-icon-dark.png\";\nimport CreateComment from \"../components/CreateComment\";\nimport { connect } from \"react-redux\";\nimport { getUser } from \"../redux/actions/authActions\";\nimport Userinfo from \"../components/Userinfo\";\nimport { Redirect } from \"react-router-dom\";\n\n// TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\n\nclass Postdetail extends Component {\n  state = {\n    post: {\n      // user is defined for destructuring\n      user: \"\",\n    },\n    comments: [],\n  };\n\n  componentDidMount() {\n    this.props.getUser();\n    const { id } = this.props.match.params;\n\n    API.get(`/api/posts/${id}`).then((res) => {\n      this.setState({ post: res.data, comments: res.data.comments, commentsLength: res.data.comments.length });\n    });\n\n     \n     console.log('history', this.props.history)\n  }\n\n  componentDidUpdate(){\n    window.location.reload();\n  }\n\n\n  addCommentToState = (comment) => {\n    console.log(this.props)\n    console.log(this.state)\n    const commentList = this.state.comments;\n    this.setState({\n      ...this.state,\n      comments: commentList.push(comment)\n    })\n\n    const { id } = this.props.match.params;\n    this.props.history.push('/postdetail/'+id)\n    \n  };\n\n  render() {\n    console.log()\n    const {\n      id: postId,\n      title,\n      body,\n      created_at,\n      updated_at,\n      comments,\n    } = this.state.post;\n\n    const {\n      id: userId,\n      first_name,\n      last_name,\n      favorite_color,\n      avatar,\n      last_login_at,\n    } = this.state.post.user;\n\n    const { isLoggedIn } = this.props;\n    console.log(isLoggedIn)\n   \n\n    return (\n      <div className=\"grid-container grid-container--2-col\">\n        {/* Column with orignal post and text editor */}\n        <section className=\"grid__col grid__col--1 flex p-3\">\n          {/* Display blogpost(text content) & avatar as flex */}\n          <article>\n            {/* Comment count total */}\n            <div>\n              <img src={commentIconDark} alt=\"\" className=\"comment-icon\" />\n              {this.state.comments.length} comments\n            </div>\n            <h1>{title}</h1>\n            {/* <Time created_at={created_at} exactTime={true} /> */}\n            <div\n              className=\"body-txt\"\n              dangerouslySetInnerHTML={{ __html: body }}\n            ></div>\n          </article>\n\n          {/* Check if user is logged in:\n                if so: show text area for comment\n                if not: hide text area for comment */}\n          {isLoggedIn.user !== \"not set\" && (\n            <CreateComment\n              postId={postId}\n              addComment={this.addCommentToState}\n              stated={this.state}\n            />\n          )}\n\n          {/* Flex item right with image and name ;*/}\n          <aside className=\"m-auto text-center detail--aside\">\n            <Userinfo\n              userId={userId}\n              imgUrl={{ avatar: avatar, avatar_class: \"\" }}\n              firstName={first_name}\n              lastName={last_name}\n            />\n          </aside>\n        </section>\n\n        {/* Colulmn with all comments */}\n        <section className=\"grid__col grid__col--2\">\n          {this.state.comments.map((comment) => (\n           \n            <Comment commentData={comment} />\n          ))}\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  stated: state,\n  isLoggedIn: state.auth,\n  posts: state.posts,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUser: () => dispatch(getUser),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Postdetail);\n"]},"metadata":{},"sourceType":"module"}