{"ast":null,"code":"import{API}from\"../../libs/API\";export var fetchPost=function fetchPost(page){return function(dispatch){API.get(\"/api/posts?page=\"+page).then(function(response){console.log('action',response.data.data);return dispatch({type:\"FETCH_DATA\",payload:response.data});});};};export var addNewPost=function addNewPost(values){return function(dispatch){//console.log('user in create post', user)\nconsole.log('values in create post',values);// Values are holding Formik values, based on key-value of initialValues\nAPI.post(\"/api/posts\",{\"title\":values.POST_title,'body':values.POST_editor}).then(function(response){console.log('addnewpost',response);return dispatch({type:\"ADD_NEW_POST\",payload:response.data});});};};export var showParticularPost=function showParticularPost(postId){return function(dispatch){API.get('/api/posts/'+postId).then(function(response){console.log(postId);return dispatch({type:\"SHOW_DETAIL\",payload:response.data});});};};export var addComment=function addComment(values,postID){return function(dispatch){// Needed data : body of comment + POST ID\n//API.post(/api/comments, {id: #, body: 'lorem'}\nAPI.post('/api/comments',{'blog_post_id':postID,'body':values.ADD_COMMENT_editor}).then(function(response){console.log('addcommentresponse',response);return dispatch({type:\"ADD_COMMENT\",payload:response.data});});};};export var editPost=function editPost(values,postId){return function(dispatch){API.put(\"/api/posts/\".concat(postId),{\"title\":values.POST_title,\"body\":values.POST_editor}).then(function(response){console.log(response);return dispatch({type:\"EDIT_POST\",payload:values});});};};// Is in actions because of reuse\nexport var deletePost=function deletePost(postID){return function(dispatch){API.delete(\"/api/posts/\".concat(postID)).then(function(response){fetchPost(1);console.log(response);return dispatch({type:\"DELETE\",payload:postID});});};};export var getUserProfile=function getUserProfile(userId){return function(dispatch){API.get(\"/api/users/\".concat(userId)).then(function(response){console.log('action getuserprofile',userId,response.data,dispatch);return dispatch({type:\"SET_USER_DETAILS\",payload:response.data});});};};// export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/redux/actions/postsActions.js"],"names":["API","fetchPost","page","dispatch","get","then","response","console","log","data","type","payload","addNewPost","values","post","POST_title","POST_editor","showParticularPost","postId","addComment","postID","ADD_COMMENT_editor","editPost","put","deletePost","delete","getUserProfile","userId"],"mappings":"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","sourcesContent":["import { API } from \"../../libs/API\";\n\n\n\nexport const fetchPost  = page => (dispatch) => {\n     API.get(\"/api/posts?page=\"+page).then(response => {\n      console.log('action', response.data.data);\n      return dispatch({\n        type: \"FETCH_DATA\",\n        payload: response.data\n      });\n    })\n}\n\nexport const addNewPost = (values) => dispatch =>{\n  //console.log('user in create post', user)\n  console.log('values in create post', values)\n\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\"title\": values.POST_title, 'body': values.POST_editor}).then(response => {\n    console.log('addnewpost', response)\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    })\n  })\n}\n\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/'+postId).then(\n    response => {\n      console.log(postId)\n      return dispatch({\n        type: \"SHOW_DETAIL\", \n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {'blog_post_id': postID, 'body': values.ADD_COMMENT_editor}).then(\n    response => {\n      console.log('addcommentresponse', response)\n      return dispatch({\n        type: \"ADD_COMMENT\",\n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const editPost = (values, postId) => dispatch =>{\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    console.log(response)\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    })\n  })\n}\n\n// Is in actions because of reuse\nexport const deletePost = postID => dispatch => {\n  API.delete(`/api/posts/${postID}`).then(\n    response => {\n      fetchPost(1)\n      console.log(response)\n      return dispatch(\n        {\n          type: \"DELETE\",\n          payload: postID\n        }\n      )\n    }\n  )\n}\n\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    console.log('action getuserprofile', userId, response.data, dispatch);\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  })\n}\n\n// export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };"]},"metadata":{},"sourceType":"module"}