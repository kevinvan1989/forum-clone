{"ast":null,"code":"import _classCallCheck from\"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{API}from\"../libs/API\";import Time from\"../components/Time\";import Comment from\"../components/Comment\";import commentIconDark from\"../assets/icons/comment-icon-dark.png\";import CreateComment from\"../components/CreateComment\";import{connect}from\"react-redux\";import{getUser as _getUser}from\"../redux/actions/authActions\";import Userinfo from\"../components/Userinfo\";// TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\nvar Postdetail=/*#__PURE__*/function(_Component){_inherits(Postdetail,_Component);var _super=_createSuper(Postdetail);function Postdetail(){var _this;_classCallCheck(this,Postdetail);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={post:{// user is defined for destructuring\nuser:\"\"},comments:[]};_this.addCommentToState=function(comment){var commentList=_this.state.comments;commentList.push(comment);_this.setState({comments:commentList});};return _this;}_createClass(Postdetail,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.props.getUser();var id=this.props.match.params.id;API.get(\"/api/posts/\".concat(id)).then(function(res){_this2.setState({post:res.data,comments:res.data.comments});});}},{key:\"render\",value:function render(){var _this$state$post=this.state.post,postId=_this$state$post.id,title=_this$state$post.title,body=_this$state$post.body,created_at=_this$state$post.created_at,updated_at=_this$state$post.updated_at,comments=_this$state$post.comments;var _this$state$post$user=this.state.post.user,userId=_this$state$post$user.id,first_name=_this$state$post$user.first_name,last_name=_this$state$post$user.last_name,favorite_color=_this$state$post$user.favorite_color,avatar=_this$state$post$user.avatar,last_login_at=_this$state$post$user.last_login_at;var isLoggedIn=this.props.isLoggedIn;return/*#__PURE__*/React.createElement(\"div\",{className:\"grid-container grid-container--2-col\"},/*#__PURE__*/React.createElement(\"section\",{className:\"grid__col grid__col--1 flex p-3\"},/*#__PURE__*/React.createElement(\"article\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"img\",{src:commentIconDark,alt:\"\",className:\"comment-icon\"}),this.state.comments.length,\" comments\"),/*#__PURE__*/React.createElement(\"h1\",null,title),/*#__PURE__*/React.createElement(\"div\",{className:\"body-txt\",dangerouslySetInnerHTML:{__html:body}})),isLoggedIn.user!==\"not set\"&&/*#__PURE__*/React.createElement(CreateComment,{postId:postId,addComment:this.addCommentToState}),/*#__PURE__*/React.createElement(\"aside\",{className:\"m-auto text-center detail--aside\"},/*#__PURE__*/React.createElement(Userinfo,{userId:userId,imgUrl:{avatar:avatar,avatar_class:\"\"},firstName:first_name,lastName:last_name}))),/*#__PURE__*/React.createElement(\"section\",{className:\"grid__col grid__col--2\"},this.state.comments.map(function(comment){return/*#__PURE__*/React.createElement(Comment,{commentData:comment});})));}}]);return Postdetail;}(Component);var mapStateToProps=function mapStateToProps(state){return{isLoggedIn:state.auth,posts:state.post};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{getUser:function getUser(){return dispatch(_getUser);}};};export default connect(mapStateToProps,mapDispatchToProps)(Postdetail);","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/Postdetail.js"],"names":["React","Component","API","Time","Comment","commentIconDark","CreateComment","connect","getUser","Userinfo","Postdetail","state","post","user","comments","addCommentToState","comment","commentList","push","setState","props","id","match","params","get","then","res","data","postId","title","body","created_at","updated_at","userId","first_name","last_name","favorite_color","avatar","last_login_at","isLoggedIn","length","__html","avatar_class","map","mapStateToProps","auth","posts","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { API } from \"../libs/API\";\nimport Time from \"../components/Time\";\nimport Comment from \"../components/Comment\";\nimport commentIconDark from \"../assets/icons/comment-icon-dark.png\";\nimport CreateComment from \"../components/CreateComment\";\nimport { connect } from \"react-redux\";\nimport { getUser } from \"../redux/actions/authActions\";\nimport Userinfo from \"../components/Userinfo\";\n\n// TODO : Delete all \"getUser blabla\"\n//        Comes with 'overview' but now entered here for developing purp.\n\nclass Postdetail extends Component {\n  state = {\n    post: {\n      // user is defined for destructuring\n      user: \"\",\n    },\n    comments: [],\n  };\n\n  componentDidMount() {\n    this.props.getUser();\n    const { id } = this.props.match.params;\n\n    API.get(`/api/posts/${id}`).then((res) => {\n      this.setState({ post: res.data, comments: res.data.comments });\n    });\n  }\n\n  addCommentToState = (comment) => {\n    const commentList = this.state.comments;\n    commentList.push(comment);\n    this.setState({\n      comments: commentList,\n    });\n  };\n\n  render() {\n    const {\n      id: postId,\n      title,\n      body,\n      created_at,\n      updated_at,\n      comments,\n    } = this.state.post;\n\n    const {\n      id: userId,\n      first_name,\n      last_name,\n      favorite_color,\n      avatar,\n      last_login_at,\n    } = this.state.post.user;\n\n    const { isLoggedIn } = this.props;\n\n    return (\n      <div className=\"grid-container grid-container--2-col\">\n        {/* Column with orignal post and text editor */}\n        <section className=\"grid__col grid__col--1 flex p-3\">\n          {/* Display blogpost(text content) & avatar as flex */}\n          <article>\n            {/* Comment count total */}\n            <div>\n              <img src={commentIconDark} alt=\"\" className=\"comment-icon\" />\n              {this.state.comments.length} comments\n            </div>\n            <h1>{title}</h1>\n            {/* <Time created_at={created_at} exactTime={true} /> */}\n            <div\n              className=\"body-txt\"\n              dangerouslySetInnerHTML={{ __html: body }}\n            ></div>\n          </article>\n\n          {/* Check if user is logged in:\n                if so: show text area for comment\n                if not: hide text area for comment */}\n          {isLoggedIn.user !== \"not set\" && (\n            <CreateComment\n              postId={postId}\n              addComment={this.addCommentToState}\n            />\n          )}\n\n          {/* Flex item right with image and name ;*/}\n          <aside className=\"m-auto text-center detail--aside\">\n            <Userinfo\n              userId={userId}\n              imgUrl={{ avatar: avatar, avatar_class: \"\" }}\n              firstName={first_name}\n              lastName={last_name}\n            />\n          </aside>\n        </section>\n\n        {/* Colulmn with all comments */}\n        <section className=\"grid__col grid__col--2\">\n          {this.state.comments.map((comment) => (\n            <Comment commentData={comment} />\n          ))}\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoggedIn: state.auth,\n  posts: state.post,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUser: () => dispatch(getUser),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Postdetail);\n"]},"metadata":{},"sourceType":"module"}