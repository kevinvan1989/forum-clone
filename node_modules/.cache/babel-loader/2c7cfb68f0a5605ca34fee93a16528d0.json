{"ast":null,"code":"import { API } from \"../../libs/API\";\nexport const fetchPost = page => dispatch => {\n  API.get(\"/api/posts?page=\" + page).then(response => {\n    console.log('action', response.data.data);\n    return dispatch({\n      type: \"FETCH_DATA\",\n      payload: response.data\n    });\n  });\n};\nexport const addNewPost = values => dispatch => {\n  //console.log('user in create post', user)\n  console.log('values in create post', values); // Values are holding Formik values, based on key-value of initialValues\n\n  API.post(\"/api/posts\", {\n    \"title\": values.POST_title,\n    'body': values.POST_editor\n  }).then(response => {\n    console.log('addnewpost', response);\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    });\n  });\n};\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/' + postId).then(response => {\n    console.log(postId);\n    return dispatch({\n      type: \"SHOW_DETAIL\",\n      payload: response.data\n    });\n  });\n};\nexport const addComment = (values, postID) => dispatch => {\n  console.log(values); // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n\n  API.post('/api/comments', {\n    'blog_post_id': postID,\n    'body': values.ADD_COMMENT_editor\n  }).then(response => {\n    // reload to show new comment list\n    window.location.reload();\n    console.log('addcommentresponse', response);\n    return dispatch({\n      type: \"ADD_COMMENT\",\n      payload: response.data\n    });\n  });\n};\nexport const editPost = (values, postId) => dispatch => {\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    console.log('res', response);\n    window.location.replace('edit-post/' + postId, '/overview/1');\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    });\n  });\n}; // Is in actions because of reuse\n\nexport const deletePosts = postID => dispatch => {\n  API.delete(`/api/posts/${postID}`).then(response => {\n    fetchPost(1);\n    console.log(response);\n    return dispatch({\n      type: \"DELETE\",\n      payload: postID\n    });\n  });\n};\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    console.log('action getuserprofile', userId, response.data, dispatch);\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  });\n}; // export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/redux/actions/postsActions.js"],"names":["API","fetchPost","page","dispatch","get","then","response","console","log","data","type","payload","addNewPost","values","post","POST_title","POST_editor","showParticularPost","postId","addComment","postID","ADD_COMMENT_editor","window","location","reload","editPost","put","replace","deletePosts","delete","getUserProfile","userId"],"mappings":"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","sourcesContent":["import { API } from \"../../libs/API\";\n\n\n\nexport const fetchPost  = page => (dispatch) => {\n     API.get(\"/api/posts?page=\"+page).then(response => {\n      console.log('action', response.data.data);\n      return dispatch({\n        type: \"FETCH_DATA\",\n        payload: response.data\n      });\n    })\n}\n\nexport const addNewPost = (values) => dispatch =>{\n  //console.log('user in create post', user)\n  console.log('values in create post', values)\n\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\"title\": values.POST_title, 'body': values.POST_editor}).then(response => {\n    console.log('addnewpost', response)\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    })\n  })\n}\n\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/'+postId).then(\n    response => {\n      console.log(postId)\n      return dispatch({\n        type: \"SHOW_DETAIL\", \n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const addComment = (values, postID) => dispatch => {\n  console.log(values)\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {'blog_post_id': postID, 'body': values.ADD_COMMENT_editor}).then(\n    response => {\n      // reload to show new comment list\n      window.location.reload()\n      console.log('addcommentresponse', response)\n      return dispatch({\n        type: \"ADD_COMMENT\",\n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const editPost = (values, postId) => dispatch =>{\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    console.log('res', response)\n    window.location.replace('edit-post/'+postId, '/overview/1')\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    })\n  })\n}\n\n// Is in actions because of reuse\nexport const deletePosts = postID => dispatch => {\n  API.delete(`/api/posts/${postID}`).then(\n    response => {\n      fetchPost(1)\n      console.log(response)\n      return dispatch(\n        {\n          type: \"DELETE\",\n          payload: postID\n        }\n      )\n    }\n  )\n}\n\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    console.log('action getuserprofile', userId, response.data, dispatch);\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  })\n}\n\n// export const fetchPost = param => async dispatch => {\n//     await API.get(\"/api/posts?page=\"+param).then(response => {\n//       console.log('action', response.data.data);\n//       return dispatch({\n//         type: \"FETCH_DATA\",\n//         payload: response.data\n//       });\n//     })\n// };"]},"metadata":{},"sourceType":"module"}