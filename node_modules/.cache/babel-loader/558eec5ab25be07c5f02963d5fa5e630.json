{"ast":null,"code":"var _jsxFileName = \"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/EditProfile.js\";\nimport React, { Component } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { API } from \"../libs/API\";\nimport UpdateProfileForm from \"../components/Forms/UpdateProfileForm\";\nexport default class EditProfile extends Component {\n  //   state = {\n  //     first_name: \"ffff\",\n  //     last_name: \"\",\n  //     avatar: \"\",\n  //     favorite_color: \"\",\n  //   };\n  componentDidMount() {\n    const {\n      idUser: id\n    } = this.props.match.params;\n    API.get(`/api/users/${id}`).then(response => {\n      this.setState({\n        first_name: response.data.first_name,\n        last_name: response.data.last_name,\n        avatar: response.data.avatar,\n        favorite_color: response.data.favorite_color\n      });\n      console.log(\"editprof\", this.state);\n    });\n  } // handleRegister = values => {\n  //     const {REGISTER_firstName, REGISTER_lastName, REGISTER_email, REGISTER_password, REGISTER_avatar, REGISTER_favColor} = values;\n  //     const userData = {\n  //       // Set data to API format (naming + FORMIK values)\n  //       first_name: REGISTER_firstName,\n  //       last_name: REGISTER_lastName,\n  //       email: REGISTER_email,\n  //       password: REGISTER_password,\n  //       avatar: REGISTER_avatar,\n  //       favorite_color: REGISTER_favColor\n  //     }\n  // }\n\n\n  render() {\n    console.log(\"edit profile\", this.state);\n    console.log(\"edit profile\", this.props);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, this.state && /*#__PURE__*/React.createElement(Formik, {\n      onSubmit: this.handleRegister,\n      initialValues: {\n        // D.m.v. deze keys worden values opgehaald in <Field>\n        PROFILE_firstName: this.state.first_name,\n        PROFILE_lastName: this.state.last_name,\n        PROFILE_avatar: this.state.avatar,\n        PROFILE_favColor: this.state.favorite_color\n      } // Input and give feedback / errors\n      ,\n      validationSchema: Yup.object({\n        REGISTER_firstName: Yup.string().required(\"req\"),\n        REGISTER_lastName: Yup.string().required(\"required\"),\n        REGISTER_email: Yup.string().matches(/^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/, \"Not a valid email\").required(\"required\"),\n        REGISTER_password: Yup.string() // .matches(\n        //   /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&])$/,\n        //   \"Must contain at least 1 cap, 1 digit & 1 spec char\"\n        // )\n        .min(8).required(\"required\"),\n        REGISTER_avatar: Yup.string().required(),\n        REGISTER_favColor: Yup.string().required()\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 26\n      }\n    }, props => /*#__PURE__*/React.createElement(UpdateProfileForm, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/Pages/EditProfile.js"],"names":["React","Component","Formik","Form","Yup","API","UpdateProfileForm","EditProfile","componentDidMount","idUser","id","props","match","params","get","then","response","setState","first_name","data","last_name","avatar","favorite_color","console","log","state","render","handleRegister","PROFILE_firstName","PROFILE_lastName","PROFILE_avatar","PROFILE_favColor","object","REGISTER_firstName","string","required","REGISTER_lastName","REGISTER_email","matches","REGISTER_password","min","REGISTER_avatar","REGISTER_favColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,iBAAP,MAA8B,uCAA9B;AAEA,eAAe,MAAMC,WAAN,SAA0BN,SAA1B,CAAoC;AACnD;AACA;AACA;AACA;AACA;AACA;AAEEO,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA,MAAM,EAAEC;AAAV,QAAiB,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAxC;AACAR,IAAAA,GAAG,CAACS,GAAJ,CAAS,cAAaJ,EAAG,EAAzB,EAA4BK,IAA5B,CAAkCC,QAAD,IAAc;AAC7C,WAAKC,QAAL,CAAc;AACZC,QAAAA,UAAU,EAAEF,QAAQ,CAACG,IAAT,CAAcD,UADd;AAEZE,QAAAA,SAAS,EAAEJ,QAAQ,CAACG,IAAT,CAAcC,SAFb;AAGZC,QAAAA,MAAM,EAAEL,QAAQ,CAACG,IAAT,CAAcE,MAHV;AAIZC,QAAAA,cAAc,EAAEN,QAAQ,CAACG,IAAT,CAAcG;AAJlB,OAAd;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,KAAKC,KAA7B;AACD,KARD;AASD,GAnBgD,CAqBjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,MAAM,GAAG;AACPH,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKC,KAAjC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4B,KAAKb,KAAjC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKc,KAAL,iBAAc,oBAAC,MAAD;AACf,MAAA,QAAQ,EAAE,KAAKE,cADA;AAEf,MAAA,aAAa,EACX;AACE;AACAC,QAAAA,iBAAiB,EAAE,KAAKH,KAAL,CAAWP,UAFhC;AAGEW,QAAAA,gBAAgB,EAAE,KAAKJ,KAAL,CAAWL,SAH/B;AAIEU,QAAAA,cAAc,EAAE,KAAKL,KAAL,CAAWJ,MAJ7B;AAKEU,QAAAA,gBAAgB,EAAE,KAAKN,KAAL,CAAWH;AAL/B,OAHa,CAWf;AAXe;AAYf,MAAA,gBAAgB,EAAElB,GAAG,CAAC4B,MAAJ,CAAW;AAC3BC,QAAAA,kBAAkB,EAAE7B,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,KAAtB,CADO;AAG3BC,QAAAA,iBAAiB,EAAEhC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,UAAtB,CAHQ;AAK3BE,QAAAA,cAAc,EAAEjC,GAAG,CAAC8B,MAAJ,GACbI,OADa,CAEZ,uHAFY,EAGZ,mBAHY,EAKbH,QALa,CAKJ,UALI,CALW;AAY3BI,QAAAA,iBAAiB,EAAEnC,GAAG,CAAC8B,MAAJ,GACjB;AACA;AACA;AACA;AAJiB,SAKhBM,GALgB,CAKZ,CALY,EAMhBL,QANgB,CAMP,UANO,CAZQ;AAoB3BM,QAAAA,eAAe,EAAErC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,EApBU;AAsB3BO,QAAAA,iBAAiB,EAAEtC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb;AAtBQ,OAAX,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAqCbxB,KAAD,iBAAW,oBAAC,iBAAD,oBAAuBA,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OArCG,CADnB,CADF;AA4CD;;AAjFgD","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { API } from \"../libs/API\";\nimport UpdateProfileForm from \"../components/Forms/UpdateProfileForm\";\n\nexport default class EditProfile extends Component {\n//   state = {\n//     first_name: \"ffff\",\n//     last_name: \"\",\n//     avatar: \"\",\n//     favorite_color: \"\",\n//   };\n\n  componentDidMount() {\n    const { idUser: id } = this.props.match.params;\n    API.get(`/api/users/${id}`).then((response) => {\n      this.setState({\n        first_name: response.data.first_name,\n        last_name: response.data.last_name,\n        avatar: response.data.avatar,\n        favorite_color: response.data.favorite_color\n      });\n      console.log(\"editprof\", this.state);\n    });\n  }\n\n  // handleRegister = values => {\n  //     const {REGISTER_firstName, REGISTER_lastName, REGISTER_email, REGISTER_password, REGISTER_avatar, REGISTER_favColor} = values;\n  //     const userData = {\n  //       // Set data to API format (naming + FORMIK values)\n  //       first_name: REGISTER_firstName,\n  //       last_name: REGISTER_lastName,\n  //       email: REGISTER_email,\n  //       password: REGISTER_password,\n  //       avatar: REGISTER_avatar,\n  //       favorite_color: REGISTER_favColor\n  //     }\n  // }\n\n  render() {\n    console.log(\"edit profile\", this.state);\n    console.log(\"edit profile\", this.props);\n    return (\n      <div>\n          {this.state && <Formik\n          onSubmit={this.handleRegister}\n          initialValues={\n            {\n              // D.m.v. deze keys worden values opgehaald in <Field>\n              PROFILE_firstName: this.state.first_name,\n              PROFILE_lastName: this.state.last_name,\n              PROFILE_avatar: this.state.avatar,\n              PROFILE_favColor: this.state.favorite_color\n            }\n          }\n          // Input and give feedback / errors\n          validationSchema={Yup.object({\n            REGISTER_firstName: Yup.string().required(\"req\"),\n\n            REGISTER_lastName: Yup.string().required(\"required\"),\n\n            REGISTER_email: Yup.string()\n              .matches(\n                /^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$/,\n                \"Not a valid email\"\n              )\n              .required(\"required\"),\n\n            REGISTER_password: Yup.string()\n              // .matches(\n              //   /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&])$/,\n              //   \"Must contain at least 1 cap, 1 digit & 1 spec char\"\n              // )\n              .min(8)\n              .required(\"required\"),\n\n            REGISTER_avatar: Yup.string().required(),\n\n            REGISTER_favColor: Yup.string().required(),\n          })}\n        >\n          {(props) => <UpdateProfileForm {...props} />}\n        </Formik>}\n        \n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}