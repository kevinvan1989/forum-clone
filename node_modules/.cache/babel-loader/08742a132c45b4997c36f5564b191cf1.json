{"ast":null,"code":"//! moment.js locale configuration\n//! locale : Welsh [cy]\n//! author : Robert Allen : https://github.com/robgallen\n//! author : https://github.com/ryangreaves\nimport moment from '../moment';\nexport default moment.defineLocale('cy', {\n  months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),\n  monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),\n  weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),\n  weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),\n  weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),\n  weekdaysParseExact: true,\n  // time formats are the same as en-gb\n  longDateFormat: {\n    LT: 'HH:mm',\n    LTS: 'HH:mm:ss',\n    L: 'DD/MM/YYYY',\n    LL: 'D MMMM YYYY',\n    LLL: 'D MMMM YYYY HH:mm',\n    LLLL: 'dddd, D MMMM YYYY HH:mm'\n  },\n  calendar: {\n    sameDay: '[Heddiw am] LT',\n    nextDay: '[Yfory am] LT',\n    nextWeek: 'dddd [am] LT',\n    lastDay: '[Ddoe am] LT',\n    lastWeek: 'dddd [diwethaf am] LT',\n    sameElse: 'L'\n  },\n  relativeTime: {\n    future: 'mewn %s',\n    past: '%s yn ôl',\n    s: 'ychydig eiliadau',\n    ss: '%d eiliad',\n    m: 'munud',\n    mm: '%d munud',\n    h: 'awr',\n    hh: '%d awr',\n    d: 'diwrnod',\n    dd: '%d diwrnod',\n    M: 'mis',\n    MM: '%d mis',\n    y: 'blwyddyn',\n    yy: '%d flynedd'\n  },\n  dayOfMonthOrdinalParse: /\\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,\n  // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh\n  ordinal: function ordinal(number) {\n    var b = number,\n        output = '',\n        lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed\n    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed\n    ];\n\n    if (b > 20) {\n      if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {\n        output = 'fed'; // not 30ain, 70ain or 90ain\n      } else {\n        output = 'ain';\n      }\n    } else if (b > 0) {\n      output = lookup[b];\n    }\n\n    return number + output;\n  },\n  week: {\n    dow: 1,\n    // Monday is the first day of the week.\n    doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n  }\n});","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/node_modules/moment/dist/locale/cy.js"],"names":["moment","defineLocale","months","split","monthsShort","weekdays","weekdaysShort","weekdaysMin","weekdaysParseExact","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","nextDay","nextWeek","lastDay","lastWeek","sameElse","relativeTime","future","past","s","ss","m","mm","h","hh","d","dd","M","MM","y","yy","dayOfMonthOrdinalParse","ordinal","number","b","output","lookup","week","dow","doy"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAOA,MAAP,MAAmB,WAAnB;AAEA,eAAeA,MAAM,CAACC,YAAP,CAAoB,IAApB,EAA0B;AACrCC,EAAAA,MAAM,EAAE,yFAAyFC,KAAzF,CACJ,GADI,CAD6B;AAIrCC,EAAAA,WAAW,EAAE,qDAAqDD,KAArD,CACT,GADS,CAJwB;AAOrCE,EAAAA,QAAQ,EAAE,+EAA+EF,KAA/E,CACN,GADM,CAP2B;AAUrCG,EAAAA,aAAa,EAAE,+BAA+BH,KAA/B,CAAqC,GAArC,CAVsB;AAWrCI,EAAAA,WAAW,EAAE,uBAAuBJ,KAAvB,CAA6B,GAA7B,CAXwB;AAYrCK,EAAAA,kBAAkB,EAAE,IAZiB;AAarC;AACAC,EAAAA,cAAc,EAAE;AACZC,IAAAA,EAAE,EAAE,OADQ;AAEZC,IAAAA,GAAG,EAAE,UAFO;AAGZC,IAAAA,CAAC,EAAE,YAHS;AAIZC,IAAAA,EAAE,EAAE,aAJQ;AAKZC,IAAAA,GAAG,EAAE,mBALO;AAMZC,IAAAA,IAAI,EAAE;AANM,GAdqB;AAsBrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,OAAO,EAAE,gBADH;AAENC,IAAAA,OAAO,EAAE,eAFH;AAGNC,IAAAA,QAAQ,EAAE,cAHJ;AAINC,IAAAA,OAAO,EAAE,cAJH;AAKNC,IAAAA,QAAQ,EAAE,uBALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAtB2B;AA8BrCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAE,SADE;AAEVC,IAAAA,IAAI,EAAE,UAFI;AAGVC,IAAAA,CAAC,EAAE,kBAHO;AAIVC,IAAAA,EAAE,EAAE,WAJM;AAKVC,IAAAA,CAAC,EAAE,OALO;AAMVC,IAAAA,EAAE,EAAE,UANM;AAOVC,IAAAA,CAAC,EAAE,KAPO;AAQVC,IAAAA,EAAE,EAAE,QARM;AASVC,IAAAA,CAAC,EAAE,SATO;AAUVC,IAAAA,EAAE,EAAE,YAVM;AAWVC,IAAAA,CAAC,EAAE,KAXO;AAYVC,IAAAA,EAAE,EAAE,QAZM;AAaVC,IAAAA,CAAC,EAAE,UAbO;AAcVC,IAAAA,EAAE,EAAE;AAdM,GA9BuB;AA8CrCC,EAAAA,sBAAsB,EAAE,kCA9Ca;AA+CrC;AACAC,EAAAA,OAAO,EAAE,iBAAUC,MAAV,EAAkB;AACvB,QAAIC,CAAC,GAAGD,MAAR;AAAA,QACIE,MAAM,GAAG,EADb;AAAA,QAEIC,MAAM,GAAG,CACL,EADK,EAEL,IAFK,EAGL,IAHK,EAIL,KAJK,EAKL,KALK,EAML,IANK,EAOL,IAPK,EAQL,IARK,EASL,KATK,EAUL,KAVK,EAWL,KAXK,EAWE;AACP,QAZK,EAaL,KAbK,EAcL,IAdK,EAeL,IAfK,EAgBL,KAhBK,EAiBL,IAjBK,EAkBL,IAlBK,EAmBL,KAnBK,EAoBL,IApBK,EAqBL,KArBK,CAqBE;AArBF,KAFb;;AAyBA,QAAIF,CAAC,GAAG,EAAR,EAAY;AACR,UAAIA,CAAC,KAAK,EAAN,IAAYA,CAAC,KAAK,EAAlB,IAAwBA,CAAC,KAAK,EAA9B,IAAoCA,CAAC,KAAK,EAA1C,IAAgDA,CAAC,KAAK,GAA1D,EAA+D;AAC3DC,QAAAA,MAAM,GAAG,KAAT,CAD2D,CAC3C;AACnB,OAFD,MAEO;AACHA,QAAAA,MAAM,GAAG,KAAT;AACH;AACJ,KAND,MAMO,IAAID,CAAC,GAAG,CAAR,EAAW;AACdC,MAAAA,MAAM,GAAGC,MAAM,CAACF,CAAD,CAAf;AACH;;AACD,WAAOD,MAAM,GAAGE,MAAhB;AACH,GApFoC;AAqFrCE,EAAAA,IAAI,EAAE;AACFC,IAAAA,GAAG,EAAE,CADH;AACM;AACRC,IAAAA,GAAG,EAAE,CAFH,CAEM;;AAFN;AArF+B,CAA1B,CAAf","sourcesContent":["//! moment.js locale configuration\n//! locale : Welsh [cy]\n//! author : Robert Allen : https://github.com/robgallen\n//! author : https://github.com/ryangreaves\n\nimport moment from '../moment';\n\nexport default moment.defineLocale('cy', {\n    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(\n        '_'\n    ),\n    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(\n        '_'\n    ),\n    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(\n        '_'\n    ),\n    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),\n    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),\n    weekdaysParseExact: true,\n    // time formats are the same as en-gb\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm',\n    },\n    calendar: {\n        sameDay: '[Heddiw am] LT',\n        nextDay: '[Yfory am] LT',\n        nextWeek: 'dddd [am] LT',\n        lastDay: '[Ddoe am] LT',\n        lastWeek: 'dddd [diwethaf am] LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: 'mewn %s',\n        past: '%s yn ôl',\n        s: 'ychydig eiliadau',\n        ss: '%d eiliad',\n        m: 'munud',\n        mm: '%d munud',\n        h: 'awr',\n        hh: '%d awr',\n        d: 'diwrnod',\n        dd: '%d diwrnod',\n        M: 'mis',\n        MM: '%d mis',\n        y: 'blwyddyn',\n        yy: '%d flynedd',\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,\n    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh\n    ordinal: function (number) {\n        var b = number,\n            output = '',\n            lookup = [\n                '',\n                'af',\n                'il',\n                'ydd',\n                'ydd',\n                'ed',\n                'ed',\n                'ed',\n                'fed',\n                'fed',\n                'fed', // 1af to 10fed\n                'eg',\n                'fed',\n                'eg',\n                'eg',\n                'fed',\n                'eg',\n                'eg',\n                'fed',\n                'eg',\n                'fed', // 11eg to 20fed\n            ];\n        if (b > 20) {\n            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {\n                output = 'fed'; // not 30ain, 70ain or 90ain\n            } else {\n                output = 'ain';\n            }\n        } else if (b > 0) {\n            output = lookup[b];\n        }\n        return number + output;\n    },\n    week: {\n        dow: 1, // Monday is the first day of the week.\n        doy: 4, // The week that contains Jan 4th is the first week of the year.\n    },\n});\n"]},"metadata":{},"sourceType":"module"}