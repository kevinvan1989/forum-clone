{"ast":null,"code":"import{API}from\"../../libs/API\";export var fetchPost=function fetchPost(page){return function(dispatch){API.get(\"/api/posts?page=\"+page).then(function(response){return dispatch({type:\"FETCH_DATA\",payload:response.data});});};};export var addNewPost=function addNewPost(values){return function(dispatch){// Values are holding Formik values, based on key-value of initialValues\nAPI.post(\"/api/posts\",{\"title\":values.POST_title,'body':values.POST_editor}).then(function(response){return dispatch({type:\"ADD_NEW_POST\",payload:response.data});});};};export var showParticularPost=function showParticularPost(postId){return function(dispatch){API.get('/api/posts/'+postId).then(function(response){return dispatch({type:\"SHOW_DETAIL\",payload:response.data});});};};export var addComment=function addComment(values,postID){return function(dispatch){// Needed data : body of comment + POST ID\n//API.post(/api/comments, {id: #, body: 'lorem'}\nAPI.post('/api/comments',{'blog_post_id':postID,'body':values.ADD_COMMENT_editor}).then(function(response){// reload to show new comment list\nwindow.location.reload();return dispatch({type:\"ADD_COMMENT\",payload:response.data});});};};export var editPost=function editPost(values,postId){return function(dispatch){API.put(\"/api/posts/\".concat(postId),{\"title\":values.POST_title,\"body\":values.POST_editor}).then(function(response){window.history.back();return dispatch({type:\"EDIT_POST\",payload:values});});};};export var getUserProfile=function getUserProfile(userId){return function(dispatch){API.get(\"/api/users/\".concat(userId)).then(function(response){return dispatch({type:\"SET_USER_DETAILS\",payload:response.data});});};};","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/redux/actions/postsActions.js"],"names":["API","fetchPost","page","dispatch","get","then","response","type","payload","data","addNewPost","values","post","POST_title","POST_editor","showParticularPost","postId","addComment","postID","ADD_COMMENT_editor","window","location","reload","editPost","put","history","back","getUserProfile","userId"],"mappings":"AAAA,OAASA,GAAT,KAAoB,gBAApB,CAIA,MAAO,IAAMC,CAAAA,SAAS,CAAI,QAAbA,CAAAA,SAAa,CAAAC,IAAI,QAAI,UAACC,QAAD,CAAc,CAC3CH,GAAG,CAACI,GAAJ,CAAQ,mBAAmBF,IAA3B,EAAiCG,IAAjC,CAAsC,SAAAC,QAAQ,CAAI,CACjD,MAAOH,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,YADQ,CAEdC,OAAO,CAAEF,QAAQ,CAACG,IAFJ,CAAD,CAAf,CAID,CALA,EAMJ,CAP6B,EAAvB,CASP,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,QAAY,UAAAR,QAAQ,CAAG,CAC/C;AACAH,GAAG,CAACY,IAAJ,CAAS,YAAT,CAAuB,CAAC,QAASD,MAAM,CAACE,UAAjB,CAA6B,OAAQF,MAAM,CAACG,WAA5C,CAAvB,EAAiFT,IAAjF,CAAsF,SAAAC,QAAQ,CAAI,CAChG,MAAOH,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,cADQ,CAEdC,OAAO,CAAEF,QAAQ,CAACG,IAFJ,CAAD,CAAf,CAID,CALD,EAMD,CARyB,EAAnB,CAUP,MAAO,IAAMM,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,MAAM,QAAI,UAAAb,QAAQ,CAAI,CACtDH,GAAG,CAACI,GAAJ,CAAQ,cAAcY,MAAtB,EAA8BX,IAA9B,CACE,SAAAC,QAAQ,CAAI,CACV,MAAOH,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,aADQ,CAEdC,OAAO,CAAEF,QAAQ,CAACG,IAFJ,CAAD,CAAf,CAID,CANH,EAQD,CATuC,EAAjC,CAWP,MAAO,IAAMQ,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACN,MAAD,CAASO,MAAT,QAAoB,UAAAf,QAAQ,CAAI,CACxD;AACA;AACAH,GAAG,CAACY,IAAJ,CAAS,eAAT,CAA0B,CAAC,eAAgBM,MAAjB,CAAyB,OAAQP,MAAM,CAACQ,kBAAxC,CAA1B,EAAuFd,IAAvF,CACE,SAAAC,QAAQ,CAAI,CACV;AACAc,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GACA,MAAOnB,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,aADQ,CAEdC,OAAO,CAAEF,QAAQ,CAACG,IAFJ,CAAD,CAAf,CAID,CARH,EAUD,CAbyB,EAAnB,CAeP,MAAO,IAAMc,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACZ,MAAD,CAASK,MAAT,QAAoB,UAAAb,QAAQ,CAAG,CACrDH,GAAG,CAACwB,GAAJ,sBAAsBR,MAAtB,EAAgC,CAC9B,QAASL,MAAM,CAACE,UADc,CAE9B,OAAQF,MAAM,CAACG,WAFe,CAAhC,EAGGT,IAHH,CAGQ,SAAAC,QAAQ,CAAI,CAClBc,MAAM,CAACK,OAAP,CAAeC,IAAf,GACA,MAAOvB,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,WADQ,CAEdC,OAAO,CAAEG,MAFK,CAAD,CAAf,CAID,CATD,EAUD,CAXuB,EAAjB,CAeP,MAAO,IAAMgB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAC,MAAM,QAAI,UAAAzB,QAAQ,CAAI,CAClDH,GAAG,CAACI,GAAJ,sBAAsBwB,MAAtB,GAAgCvB,IAAhC,CAAqC,SAAAC,QAAQ,CAAI,CAC/C,MAAOH,CAAAA,QAAQ,CAAC,CACdI,IAAI,CAAE,kBADQ,CAEdC,OAAO,CAAEF,QAAQ,CAACG,IAFJ,CAAD,CAAf,CAID,CALD,EAMD,CAPmC,EAA7B","sourcesContent":["import { API } from \"../../libs/API\";\n\n\n\nexport const fetchPost  = page => (dispatch) => {\n     API.get(\"/api/posts?page=\"+page).then(response => {\n      return dispatch({\n        type: \"FETCH_DATA\",\n        payload: response.data\n      });\n    })\n}\n\nexport const addNewPost = (values) => dispatch =>{\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\"title\": values.POST_title, 'body': values.POST_editor}).then(response => {\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    })\n  })\n}\n\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/'+postId).then(\n    response => {\n      return dispatch({\n        type: \"SHOW_DETAIL\", \n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {'blog_post_id': postID, 'body': values.ADD_COMMENT_editor}).then(\n    response => {\n      // reload to show new comment list\n      window.location.reload()\n      return dispatch({\n        type: \"ADD_COMMENT\",\n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const editPost = (values, postId) => dispatch =>{\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    window.history.back()\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    })\n  })\n}\n\n\n\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  })\n}"]},"metadata":{},"sourceType":"module"}