{"ast":null,"code":"var _jsxFileName = \"/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/components/CreateComment.js\";\nimport React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { addComment } from \"../redux/actions/postsActions\";\nimport CreateCommentForm from \"./CreateCommentForm\";\nimport { getUser } from \"../redux/actions/authActions\";\n\nclass CreateComment extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handlePostComment = values => {\n      this.props.getUser();\n      const {\n        postId\n      } = this.props;\n      this.props.postComment(values, postId);\n      const {\n        id\n      } = this.props.match.params;\n      this.props.history.push(\"/postdetail/\" + id);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"comment-editor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Formik, {\n      onSubmit: this.handlePostComment,\n      initialValues: {\n        // D.m.v. deze keys worden values opgehaald in <Field>\n        ADD_COMMENT_editor: \"init value Formik\"\n      } // Input and give feedback / errors\n      ,\n      validationSchema: Yup.object({}),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, props => /*#__PURE__*/React.createElement(CreateCommentForm, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 23\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  stated: state,\n  isLoggedIn: state.auth,\n  posts: state.posts\n});\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: (values, postID) => dispatch(addComment(values, postID)),\n  getUser: () => dispatch(getUser)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateComment);","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/components/CreateComment.js"],"names":["React","Component","Formik","Yup","connect","addComment","CreateCommentForm","getUser","CreateComment","handlePostComment","values","props","postId","postComment","id","match","params","history","push","render","ADD_COMMENT_editor","object","mapStateToProps","state","stated","isLoggedIn","auth","posts","mapDispatchToProps","dispatch","postID"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,+BAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,OAAT,QAAwB,8BAAxB;;AAEA,MAAMC,aAAN,SAA4BP,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SACpCQ,iBADoC,GACfC,MAAD,IAAY;AAC9B,WAAKC,KAAL,CAAWJ,OAAX;AACA,YAAM;AAAEK,QAAAA;AAAF,UAAa,KAAKD,KAAxB;AACA,WAAKA,KAAL,CAAWE,WAAX,CAAuBH,MAAvB,EAA+BE,MAA/B;AACA,YAAM;AAAEE,QAAAA;AAAF,UAAS,KAAKH,KAAL,CAAWI,KAAX,CAAiBC,MAAhC;AACA,WAAKL,KAAL,CAAWM,OAAX,CAAmBC,IAAnB,CAAwB,iBAAiBJ,EAAzC;AACD,KAPmC;AAAA;;AASpCK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,EAAE,EAAC,gBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AACE,MAAA,QAAQ,EAAE,KAAKV,iBADjB;AAEE,MAAA,aAAa,EAAE;AACb;AACAW,QAAAA,kBAAkB,EAAE;AAFP,OAFjB,CAME;AANF;AAOE,MAAA,gBAAgB,EAAEjB,GAAG,CAACkB,MAAJ,CAAW,EAAX,CAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASIV,KAAD,iBAAW,oBAAC,iBAAD,oBAAuBA,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATd,CADF,CADF;AAeD;;AAzBmC;;AA2BtC,MAAMW,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,MAAM,EAAED,KAD0B;AAElCE,EAAAA,UAAU,EAAEF,KAAK,CAACG,IAFgB;AAGlCC,EAAAA,KAAK,EAAEJ,KAAK,CAACI;AAHqB,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACxChB,EAAAA,WAAW,EAAE,CAACH,MAAD,EAASoB,MAAT,KAAoBD,QAAQ,CAACxB,UAAU,CAACK,MAAD,EAASoB,MAAT,CAAX,CADD;AAExCvB,EAAAA,OAAO,EAAE,MAAMsB,QAAQ,CAACtB,OAAD;AAFiB,CAAf,CAA3B;;AAKA,eAAeH,OAAO,CAACkB,eAAD,EAAkBM,kBAAlB,CAAP,CAA6CpB,aAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { addComment } from \"../redux/actions/postsActions\";\nimport CreateCommentForm from \"./CreateCommentForm\";\nimport { getUser } from \"../redux/actions/authActions\";\n\nclass CreateComment extends Component {\n  handlePostComment = (values) => {\n    this.props.getUser();\n    const { postId } = this.props;\n    this.props.postComment(values, postId);\n    const { id } = this.props.match.params;\n    this.props.history.push(\"/postdetail/\" + id);\n  };\n\n  render() {\n    return (\n      <div id=\"comment-editor\">\n        <Formik\n          onSubmit={this.handlePostComment}\n          initialValues={{\n            // D.m.v. deze keys worden values opgehaald in <Field>\n            ADD_COMMENT_editor: \"init value Formik\",\n          }}\n          // Input and give feedback / errors\n          validationSchema={Yup.object({})}\n        >\n          {(props) => <CreateCommentForm {...props} />}\n        </Formik>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  stated: state,\n  isLoggedIn: state.auth,\n  posts: state.posts,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  postComment: (values, postID) => dispatch(addComment(values, postID)),\n  getUser: () => dispatch(getUser),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateComment);\n"]},"metadata":{},"sourceType":"module"}