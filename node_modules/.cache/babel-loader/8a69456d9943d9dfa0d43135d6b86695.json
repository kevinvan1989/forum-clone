{"ast":null,"code":"import { API } from \"../../libs/API\";\nexport const fetchPost = page => dispatch => {\n  API.get(\"/api/posts?page=\" + page).then(response => {\n    return dispatch({\n      type: \"FETCH_DATA\",\n      payload: response.data\n    });\n  });\n};\nexport const addNewPost = values => dispatch => {\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\n    \"title\": values.POST_title,\n    'body': values.POST_editor\n  }).then(response => {\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    });\n  });\n};\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/' + postId).then(response => {\n    return dispatch({\n      type: \"SHOW_DETAIL\",\n      payload: response.data\n    });\n  });\n};\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {\n    'blog_post_id': postID,\n    'body': values.ADD_COMMENT_editor\n  }).then(response => {\n    // reload to show new comment list\n    window.location.reload();\n    return dispatch({\n      type: \"ADD_COMMENT\",\n      payload: response.data\n    });\n  });\n};\nexport const editPost = (values, postId) => dispatch => {\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    window.history.back();\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    });\n  });\n};\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  });\n};","map":{"version":3,"sources":["/Users/kevinvanantwerpen/Documents/Eindwerk Syntra 2020/src/redux/actions/postsActions.js"],"names":["API","fetchPost","page","dispatch","get","then","response","type","payload","data","addNewPost","values","post","POST_title","POST_editor","showParticularPost","postId","addComment","postID","ADD_COMMENT_editor","window","location","reload","editPost","put","history","back","getUserProfile","userId"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAIA,OAAO,MAAMC,SAAS,GAAIC,IAAI,IAAKC,QAAD,IAAc;AAC3CH,EAAAA,GAAG,CAACI,GAAJ,CAAQ,qBAAmBF,IAA3B,EAAiCG,IAAjC,CAAsCC,QAAQ,IAAI;AACjD,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,YADQ;AAEdC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GALA;AAMJ,CAPM;AASP,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAYR,QAAQ,IAAG;AAC/C;AACAH,EAAAA,GAAG,CAACY,IAAJ,CAAS,YAAT,EAAuB;AAAC,aAASD,MAAM,CAACE,UAAjB;AAA6B,YAAQF,MAAM,CAACG;AAA5C,GAAvB,EAAiFT,IAAjF,CAAsFC,QAAQ,IAAI;AAChG,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,cADQ;AAEdC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GALD;AAMD,CARM;AAUP,OAAO,MAAMM,kBAAkB,GAAGC,MAAM,IAAIb,QAAQ,IAAI;AACtDH,EAAAA,GAAG,CAACI,GAAJ,CAAQ,gBAAcY,MAAtB,EAA8BX,IAA9B,CACEC,QAAQ,IAAI;AACV,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,aADQ;AAEdC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GANH;AAQD,CATM;AAWP,OAAO,MAAMQ,UAAU,GAAG,CAACN,MAAD,EAASO,MAAT,KAAoBf,QAAQ,IAAI;AACxD;AACA;AACAH,EAAAA,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0B;AAAC,oBAAgBM,MAAjB;AAAyB,YAAQP,MAAM,CAACQ;AAAxC,GAA1B,EAAuFd,IAAvF,CACEC,QAAQ,IAAI;AACV;AACAc,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA,WAAOnB,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,aADQ;AAEdC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GARH;AAUD,CAbM;AAeP,OAAO,MAAMc,QAAQ,GAAG,CAACZ,MAAD,EAASK,MAAT,KAAoBb,QAAQ,IAAG;AACrDH,EAAAA,GAAG,CAACwB,GAAJ,CAAS,cAAaR,MAAO,EAA7B,EAAgC;AAC9B,aAASL,MAAM,CAACE,UADc;AAE9B,YAAQF,MAAM,CAACG;AAFe,GAAhC,EAGGT,IAHH,CAGQC,QAAQ,IAAI;AAClBc,IAAAA,MAAM,CAACK,OAAP,CAAeC,IAAf;AACA,WAAOvB,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,WADQ;AAEdC,MAAAA,OAAO,EAAEG;AAFK,KAAD,CAAf;AAID,GATD;AAUD,CAXM;AAeP,OAAO,MAAMgB,cAAc,GAAGC,MAAM,IAAIzB,QAAQ,IAAI;AAClDH,EAAAA,GAAG,CAACI,GAAJ,CAAS,cAAawB,MAAO,EAA7B,EAAgCvB,IAAhC,CAAqCC,QAAQ,IAAI;AAC/C,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,kBADQ;AAEdC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAFJ,KAAD,CAAf;AAID,GALD;AAMD,CAPM","sourcesContent":["import { API } from \"../../libs/API\";\n\n\n\nexport const fetchPost  = page => (dispatch) => {\n     API.get(\"/api/posts?page=\"+page).then(response => {\n      return dispatch({\n        type: \"FETCH_DATA\",\n        payload: response.data\n      });\n    })\n}\n\nexport const addNewPost = (values) => dispatch =>{\n  // Values are holding Formik values, based on key-value of initialValues\n  API.post(\"/api/posts\", {\"title\": values.POST_title, 'body': values.POST_editor}).then(response => {\n    return dispatch({\n      type: \"ADD_NEW_POST\",\n      payload: response.data\n    })\n  })\n}\n\nexport const showParticularPost = postId => dispatch => {\n  API.get('/api/posts/'+postId).then(\n    response => {\n      return dispatch({\n        type: \"SHOW_DETAIL\", \n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const addComment = (values, postID) => dispatch => {\n  // Needed data : body of comment + POST ID\n  //API.post(/api/comments, {id: #, body: 'lorem'}\n  API.post('/api/comments', {'blog_post_id': postID, 'body': values.ADD_COMMENT_editor}).then(\n    response => {\n      // reload to show new comment list\n      window.location.reload()\n      return dispatch({\n        type: \"ADD_COMMENT\",\n        payload: response.data\n      })\n    }\n  )\n}\n\nexport const editPost = (values, postId) => dispatch =>{\n  API.put(`/api/posts/${postId}`, {\n    \"title\": values.POST_title,\n    \"body\": values.POST_editor\n  }).then(response => {\n    window.history.back()\n    return dispatch({\n      type: \"EDIT_POST\",\n      payload: values\n    })\n  })\n}\n\n\n\nexport const getUserProfile = userId => dispatch => {\n  API.get(`/api/users/${userId}`).then(response => {\n    return dispatch({\n      type: \"SET_USER_DETAILS\",\n      payload: response.data\n    });\n  })\n}"]},"metadata":{},"sourceType":"module"}